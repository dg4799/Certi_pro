□ 문제 해석
1. Message(글)에는 comment(댓글)과 recomment(대댓글)이 달릴 수 있고 종속관계임
  - 글(댓글 번호), 댓글(대댓글 번호), 대댓글(댓글 번호)를 가지고 있어야함
2. 글에는 여러개의 댓글과 그 댓글에 여러개의 답글이 달릴 수 있음
3. 글이 삭제될 때는 글에 달린 댓글과 답글을 모두 삭제 해야함
  - 글의 댓글번호를 타고 들어가서 댓글 삭제
  - 댓글의 대댓글 번호를 타고 들어가서 대댓글 삭제
4. 글, 댓글, 대댓글은 각각 포인트를 가진다.
5. 글, 댓글, 대댓글의 포인트들 이용해서 베스트 글 또는 베스트 유저를 찾아 보여줌
6. 베스트글 : 글 포인트 + 글에 달린 댓글 포인트 + 댓글에 달린 답글 포인트를 모두 총합하고 내림차순 5개 보여줌
7. 베스트 유저 : 사용자가 작성한 글 + 댓글 + 답글의 포인트를 모두 총합하고 내림차순 5명을 보여줌
               ★ 만약 합한 포인트가 같으면 사용자 이름이 사전순 (테스트케이스 일부 실패가능성)

□ 문제 설계
- 글 리스트{} : {글작성자 ID, 글작성자 Name, 글의 총합 포인트, 글 포인트, 댓글 ID 리스트[]}
- 댓글 리스트{} : {댓글작성자 ID, 댓글작성자 Name, 댓글 포인트, 글 ID 리스트[], 대댓글 ID 리스트[]}
- 대댓글 리스트{} : {대댓글작성자 ID, 대댓글작성자 Name, 대댓글 포인트, 댓글 ID 리스트[]}
- 사용자 포인트 리스트{:} : {사용자 Name : 사용자 Point}
- 글 포인트 리스트 : 글 리스트에 총합 포인트 활용
- 베스트 글 리스트[] : 탑 5 글을 빠르게 뽑기 위함 (-글의 포인트, 글 ID)
  · 업데이트 될때마다 추가하고 베스트를 뽑을땐 값이 사용자 id의 값과 같지 않으면 무시해서 걸러내기.
- 사용자 베스트 리스트[] : 탑 5 유저를 빠르게 뽑기 위함 (-유저 포인트, 유저 Name)
  · 업데이트 될때마다 추가하고 베스트를 뽑을땐 값이 사용자 id의 값과 같지 않으면 무시해서 걸러내기.

- WriteMessage(글작성)
 1. 사용자 포인트 리스트에 값을 추가 : 사용자[Name] += Point → defaultdict(int)로 만들어야함
 2. 글 리스트에 값을 추가
 3. 베스트 글 리스트에 값을 push (해당 글에 댓글이나 대댓글 달릴때마다 글 리스트의 포인트를 push해서 쌓기
 4. 사용자 베스트 리스트에 값을 push
 * 사용자 포인트의 값을 return

- commentTo(댓글 작성)
 - mTargetID가 글이라면 댓글을 작성하는 경우
   1. 사용자 포인트 리스트에 값을 추가 : 사용자[Name] += Point
   2. 글 총합 포인트에 값을 추가
   3. 댓글 리스트에 값을 추가
   4. 베스트 글 리스트에 값을 push
   5. 사용자 베스트 리스트에 값을 push
   * 글의 총합 포인트를 return
 - mTargetID가 댓글이라면 대댓글을 작성하는 경우
   1. 사용자 포인트 리스트에 값을 추가 : 사용자[Name] += Point
   2. 댓글을 타고 글의 총합 포인트에 값을 추가
   3. 대댓글 리스트에 값을 추가
   4. 베스트 글 리스트에 값을 push (해당 글에 댓글이나 대댓글 달릴때마다 글 리스트의 포인트를 push해서 쌓기
   5. 사용자 베스트 리스트에 값을 push
   * 대댓글이 달린 글의 총합 포인트를 return

- erase(삭제) : 일단 모르겠으니 삭제를 다한 후의 값을 return
 - mID가 글이라면
   1. 사용자 포인트 리스트에 글 포인트 만큼 차감
   1-1 사용자 베스트 리스트 push
   2. 글 포인트 0으로 삭제
   2-1. 글 베스트 리스트 push
   3. 댓글 리스트를 찾아 들어가서
   4. 댓글 사용자의 포인트를 차감
   4-1. 사용자 베스트 리스트 push
   5. 댓글의 대댓글 찾아 들어가서
   6. 대댓글 사용자 포인트를 차감
   6-1. 사용자 베스트 리스트 push
   * 사용자의 총합 포인트 반환
 - mID가 댓글이라면
   1. mID 글에서 댓글~대댓글 부분 진행
     - 댓글, 대댓글 삭제시 글의 총합 포인트에서 차감
   * 달려있던 글의 총합 포인트를 반환
 - mID가 대댓글이라면
   * 달려있던 글의 총합 포인트를 반환
   2. mID 글에서 대댓글 부분 진행
     - 대댓글 삭제시 글의 총합 포인트에서 차감

- getBestMessages
  1. 임시 리스트를 만들고
  2. while을 임시리스트가 5개가 되기 전까지 돌리고
  3. hepq pop으로 뽑아서 (-이므로 가장 큰수가 뽑힘), 스코어에 -을 더해서 양수로 바꿔줌
  4. 해당값이 글 리스트의 값과 같지 않거나 이미 임시리스트에 있으면 무시

  5. 임시리스트를 for문으로 뽑아서
  6. 베스트 글 리스트에 추가(이후에 또 반영하기 위함)
  * mBestMessageList의 인덱스에 값을 입력

- getBestUsers
  1. getBestMessages와 유사하게 진행
    - 해당값이 사용자 리스트의 값과 같지 않거나 이미 임시리스트에 있으면 무시
  * mBestUserList의 인덱스에 값을 입력


※ 테스트케이스에서 실패가 나온다면!!
 1. testcase.py에서 실패위치를 디버깅으로 잡는다.
 2. 해당위치의 request 종류와 이름 또는 값이 나온다
 3. 그럼 해당 함수에 가서 이름으로 if로 잡으면 찾을 수 있음
 4. 그때 request 정답 return과 내 return을 비교해서 잘못된 부분이 있는지 바로 체크!!