⬜ sqrt 구간합
      - while left <= right (right까지만 더함) and left%제곱근 (나누어졌을때 몫이 0이되어 구간에 도달)
            left += 1 (제곱근에 도달할때까지 +)
            res += 숫자
      - while left <= right (left까지만 더함) and right+1%제곱근 (여기서 right+1은 321까지 더하는 것임)
            right -=1
            res += 숫자
      - while left <= right (left에 +제곱근을 하는데 right를 초과하면 구간이 넘어가므로 탈출)
            res += sqrt_time[left//sqrt] (구간합)
            left += sqrt (left에 제곱근을 더해 다음 구간을 계산)

⬜ sqrt 2차원 구간합 또는 구간체크
  - nX = mX // l, nY = mY // l --> (nX, nY) 구간 생성
  - hash[(nX, nY)].append(mX, mY, mID, ...) --> 해당구간에 데이터 저장
  - pX = mX // l, pY = mY // l --> (pX, pY) 특정지점 구간 확인
  - dx = [0, 1, -1], dy = [0, 1, -1] for문을 돌려 (pX, pY) 근처 구간만 데이터 확인

⬜ Dijkstra
  - hash[mid]=(next_mid, dist), hash[next_mid]=(mid, dist) --> mid에서 next_mid까지 비용을 서로 저장
  - 무한배열 cost[INF, INF..] 생성
  - start 인덱스의 비용을 0으로 잡고(cost[0] = 0) q에 넣고 while 시작(heappush(q, (0, start))
  - q에서 값을 빼내어(dist, now = heappop(q)) hash[now]에서 값을 빼옴 (next_mid, dist)
  - start dist + next_mid dist = cost, cost가 cost[next_mid]보다 낮으면  --> cost[next_mid]를 cost로 갱신
  - 다시 q에 현재의 cost와 next_mid를 넣는다 --> heappush(q, (cost, next_mid))
  - 연결되어 있는 mid를 찾아 들어가서 비용갱신을 반복하여 최저값 비용 찾음, 연결 안되어있는 지점들은 INF로 남음



⬜ LCA (최소 공통 조상)
  ★ 노드의 이름에 인덱스 번호를 부여!!! parent 리스트와 depth 리스트를 해당 인덱스에 값을 넣고 꺼내쓴다!
  1. node add
    - idx += 1, info_name[node_name] = idx                   --> 노드를 입력받으면 인덱스 번호를 부여하고 리스트에 저장
    - parent_list.append(info_name[parent_node_name])        --> parent 리스트에 부모노드의 인덱스를 append (parent 리스트에 부모노드 번호를 기록)
    - depth.append(depth[info_name[parent_node_name]]+1)     --> depth 리스트에 부모깊이에 +1을 더해 기록
  2. LCA 찾기
    - 두개의 노드를 입력받으면 인덱스번호를 info_name[node_name]으로 찾는다.
    - index_1과 index_2의 깊이를 비교하고 index_2의 깊이가 낮으면 index_2의 깊이를 더 깊게 한다 (깊이 맞추기에서 index_2만 조정하기 위함)
      - index_1, index_2 = index_2, index_1
    - while로 index_1과 index_2의 깊이를 맞춘다
      - index_1보다 index_2가 깊으면 -> index_2 = parent_list[index_2], res += 1 -->index_2의 부모를 찾아 index_2에 부모 인덱스를 저장하고 거리값 +1
      - index_1과 index_2의 깊이가 같으면 -> index_1과 index_2가 같은 조상인지 체크하고 아니라면 각각 부모로 한칸 이동 및 거리값 +1씩
    - 최종 거리값을 return --> 두 노드의 같은 조상까지 거리

⬜ Union find (합집합 찾기 : 조합해서 계산)
  - 조별경기 과제에서 Union find를 활용하여 각 노드의 최종값을 계산함
    0. node 수만큼 parent[0, 1, ... N] 생성 (초기엔 연결없이 독립적)
    1. 부모노드 찾기 find_root()
      - while로 node == parent[node]라면 node는 최상위 노드 찾고 return node
                아니라면 node = parents[node]해서 부모노드를 node에 넣고 다시 while --> 이렇게하면 연결되어있는 최상위 노드까지 찾음
    2. Union(합치기, 큰번호의 부모를 작은번호로 연결)
      - a, b의 최상위노드를 찾음
      - a, b중 작은 번호의 노드를 큰 번호의 노드에 부모노드로 넣음 -> a < b라면 parents[b] = a
      - b의 score에 a 값을 뺌 -> scores[b] -= scores[a] --> b는 추후 getscore에 최상위 노드를 찾아가며 score를 모두 더하여 최종값 계산
    3. Union 그룹에 속한 node에 값을 반영
      - mID 노드의 최상위 노드를 찾음 -> scores[최상위노드] += 또는 -= 를 반영하면 연결되어 있는 모든 노드들에 값이 반영
    4. 최종값 계산 getscore()
      - cur_score = scores[mId], while로 최상위노드 찾으면서 cur_score에 += score[mID]



⬜ 타임라인이 있는 문제
  - update 함수를 만들어 해당 타임에 속하는 액션들을 처리함, 액션들은 heap으로 push해서 순서대로 넣기
    1. 액션들을 time 순으로 heappush
    2. update 함수에서 heappop으로 가장 오래된 것부터 뽑아서 액션(순서대로 액션을 취하기 위함)
  - input의 데이터가 고유하다면 delete 리스트에 넣어 추후 if로 걸러내기만 해도 됌.

⬜ 종속성이 있는 문제
  - 종속된 관계가 있다면 부모리스트에 자식을 리스트형태로 저장하여 꺼내어 쓰며 풀어감

⬜ 블럭게임
  - 타임라인이 있는 문제로 update 함수 필요, 추가되는 항목들을 heap으로 push해서 하나씩 꺼내서 처리함
  - (블록 생성시간 + 행의 수) <= 현재시간 --> 블록리스트에서 제거 및 카운트 업데이트
  - 바닥과 가장 가까운 블럭을 제거하는 지문이지만 실제 그림에선 겹치는 블럭만 남기면 해결!
    1. 겹침을 체크하는 열의 수만큼의 체크 리스트 생성
    2. 블럭을 pop으로 꺼내서 시작칸부터 끝나는칸까지 for문으로 돌며 칸이 겹치면 임시 블록리스트에 넣기

⬜ 로봇청소기
  - 현재 direction에서 반시계 90도 회전
    1. dx, dy의 [북, 서, 남, 동] 형태로 만듬
    2. dx, dy의 인덱스를 보고 다음 인덱스를 찾는 공식 : nd = (direction + 3) % 4
    3. dfs로 nd로 회전하며 체크하고 방문이 안되면 재귀가 끝나고 현재 회전방향(direction)에 nd를 저장